name: Continuous Integration

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.0
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter

# A workflow run is made up of one or more jobs, which run in parallel by default
# Each job runs in a runner environment specified by runs-on
jobs:
  # Unique identifier of our job (`job_id`)
  test:
    name: Test
    runs-on: ubuntu-latest
    # Service containers to run with the `test` container job
    services:
      postgres:
        image: postgres:14
        # Environment variables scoped only for the `postgres` element
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        # When you map ports using the ports keyword, GitHub uses the --publish command to publish the containerâ€™s ports to the Docker host
        # Opens tcp port 5432 on the host and service container
        ports:
          - 5432:5432
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        # This is an action that checks out your repository onto the runner, allowing you to run scripts or other actions against your code (such as build and test tools).
        # You should use the checkout action any time your workflow will run against the repository's code.
        uses: actions/checkout@v4

      # This GitHub Action installs a Rust toolchain using rustup. It is designed for one-line concise usage and good defaults.
      - name: Install the Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # A GitHub Action that implements smart caching for rust/cargo projects with sensible defaults.
      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          # An additional cache key that is added alongside the automatic `job`-based cache key and can be used to further differentiate jobs. default: empty
          key: sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        run:
            cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
            # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available. 
            # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published. 
            # It may also be useful if a newer version of a dependency is published that no longer builds on your system, or has other problems

      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client

          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

          # Grant create db privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run tests
        run: cargo test

      # - name: Prepare SQLx Queries
      #   run: cargo sqlx prepare -- --lib

      - name: Git add
        run: git add .sqlx

      - name: Check that queries are fresh
        run: cargo sqlx prepare --workspace --check -- --all-targets

  # `fmt` container job
  fmt:
    name: RustFmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Specific to dtolnay/rust-toolchain: Comma-separated string of additional components to install
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check  

  # 'clippy' container job
  clippy:
    name: Linter
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Linting
        run: cargo clippy -- -D warnings

  # `coverage` container job
  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432   
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked

      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client

          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

          # Grant create db privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: |
          cargo install cargo-tarpaulin && cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
      
      - name: Coveralls Github Action
        uses: coverallsapp/github-action@v2.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}